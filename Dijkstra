__author__ = 'Kalla Baek'
#Dijkstra algorithm to report Management Science lecture
#optimized in python 2.7
import operator

def dijkstra(dic,src,dest,visited=[],distances={},predecessors={}):

    if src not in dic:
        raise TypeError('There is no source node in matrix')
    if dest not in dic:
        raise TypeError('There is no destination node in matrix')
    path=[]
    pred=dest
    
    if src == dest:
        # build the shortest path and display it
        print""
        while pred != None:
            print "From",pred,
            path.append(pred)
            pred=predecessors.get(pred,None)
            # getting value of pred. if not, return None
            if not pred == None:
                print "to",pred
        path.reverse()
        # to show path in human readable
        print'shortest path:',str(path),"and cost =",str(distances[dest])
        
    else :
        # Initiailize
        if not visited:
            #if visited is empty
            distances[src]=0
            
        for adj in dic[src] :
            # go to adjacent nodes
            #print " Shortest path start from",predecessors
            if adj not in visited:
                new_d = distances[src] + dic[src][adj]
                if new_d < distances.get(adj,float('inf')):
                    distances[adj] = new_d
                    print "--This is new distance from",src,"to",adj,",distance :",new_d
                    predecessors[adj] = src
                print " Shortest path start from",predecessors
        # mark as visited
        visited.append(src)
        # now that all neighbors have been visited: recurse
        # select the non visited node with lowest distance 'x'
        # run Dijskstra with src='x'
        unvisited={}
        for k in dic:
            if k not in visited:
                unvisited[k] = distances.get(k,float('inf'))
        x=min(unvisited, key=unvisited.get)
        print "",x,"trials result"
        #print visited,"is fixed"
        sorted_x = sorted(unvisited.items(), key=operator.itemgetter(1))
        sorted_x.reverse
        print sorted_x
        print ""
        print "-----------------------------------------"
        dijkstra(dic,x,dest,visited,distances,predecessors)
        #recursive

def inp_value(i,j):
    dic[i][j] = int(raw_input())
    if dic[i][j] == 0:
        dic[i][j] = float('inf')


#__main__
print "Did you want input your value? Y/N :",
num = raw_input()
if num == "Y" or num == "y":
    print "========================================================================="
    print "Please input the number of nodes did you want to add(include source and destination)"
    print " # Notice : if you don't want to input(there is no route), input 0"
    print "The number of nodes : ",
    
    column = int(raw_input())
    dic = dict()
    dic2 = dict()
    
    for i in range(column):
        dic[i]={}
        for j in range(column):
            if i == j :
                dic[i][j] = 0
                continue
            if j == 0 :
                print "Input the",(i),"value - to source node :",
                dic[i][j] = float(raw_input())
                if dic[i][j] == 0:
                    dic[i][j] = float('inf')
                #print "dic",(i),(j)," is ",dic[i][j]
                continue
            elif j == column-1:
                print "Input the",(i),"value - to destination node :",
                dic[i][j] = float(raw_input())
                if dic[i][j] == 0:
                    dic[i][j] = float('inf')
                #print "dic",(i),(j)," is ",dic[i][j]
                continue
            elif j == 1 :
                print "Input the",(i),"value - to 1 st node :",
                dic[i][j] = float(raw_input())
                if dic[i][j] == 0:
                    dic[i][j] = float('inf')
                #print "dic",(i),(j)," is ",dic[i][j]
                continue                
            elif j == 2 :
                print "Input the",(i),"value - to 2 nd node :",
                dic[i][j] = float(raw_input())
                try:
                    if dic[i][j] == 0:
                        dic[i][j] = float('inf')
                except KeyError:
                    print "why not?"
                #print "dic",(i),(j)," is ",dic[i][j]
                continue                
            elif j == 3 :
                print "Input the",(i),"value - to 3 rd node :",
                dic[i][j] = float(raw_input())
                if dic[i][j] == 0:
                    dic[i][j] = float('inf')
                continue                    
            else:
                print "Input the",(i),"value - to",(j),"th node :",
                dic[i][j] = float(raw_input())
                if dic[i][j] == 0:
                    dic[i][j] = float('inf')
                continue                    
        #j for is completed
        if i == 0:
            print " Your source node value is ",(dic[i])
        #elif i == column-1:
        #    print " Your destination node value is ",(dic[i])
        #    continue
        elif i == 1:
            print " Your 1 st node value is ",(dic[i])
        elif i == 2:
            print " Your 2 nd node value is ",(dic[i])
        elif i == 3:
            print " Your 3 rd node value is ",(dic[i])
        else:
            print " Your",(i),"th node value is ",(dic[i])        
    #i for is completed
    print ""
    print "Your input"
    for k in range(column):
        print k,"-",dic[k]
    print ""
    dijkstra(dic,0,column-1)
    
else:
    print "========================================================================="
    dic = {0: {1: 60, 2: 90, 3: 130, 4: 190, 5: 260},
           1: {2: 60, 3: 90, 4: 130, 5: 190, 6: 260},
           2: {3: 60, 4: 90, 5: 130, 6: 190},
           3: {4: 60, 5: 90, 6: 130},
           4: {5: 60, 6: 90},
           5: {6:60},
           6: {}}
    for i in range(7):
        print (i),"-",dic[i]
    dijkstra(dic,0,6)
    
